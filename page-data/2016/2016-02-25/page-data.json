{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2016/2016-02-25/","result":{"data":{"markdownRemark":{"html":"<p>React is a JavaScript library for building user interfaces (UI) by Facebook. Think of React like the View in the Model, View, Controller (MVC) web design pattern. The power of React is to create reusable components and dynamic UIs. This library allows you to create your own UI components using Javascript and allows you to reuse them anywhere in your web application. This blog will be my notes on React.</p>\n<h3>Why React?</h3>\n<p>The web is becoming more interactive. React makes it easy to display data and will automatically update when the data changes. After creating a UI component, you are able to reuse it in your web application. One of React's finest features is composability which allows you to use UI components together. React in my words is that it allows you to create custom web components that will change dynamically with user interactions. This makes DOM manipulation easy and fast by using a virtual DOM. With React you can create dynamic UI components that enhance user experience (UX).</p>\n<h3>Getting Started</h3>\n<p>To get started with React you need the libraries and tools. To get the react libraries you will need to have <code class=\"language-text\">npm</code> installed on your machine. <code class=\"language-text\">NPM</code> is a javascript package manager that allows distribution of javascript modules. The two modules you need will be <code class=\"language-text\">react</code> and <code class=\"language-text\">react-dom</code>. It is recommend that you use JSX, this makes it easier to write your react components. JSX syntax makes it more HTML-like, since you are creating a custom web components it should look more like HTML. </p>\n<p>Here is a example using pure JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>href<span class=\"token operator\">:</span> <span class=\"token string\">'https://facebook.github.io/react/'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here is the same example using JSX:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://facebook.github.io/react/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>For you to use JSX you need the tool that transpile JSX to JS. Babel is a Javascript compiler that provides the tools you need to use JSX with React. The npm module you need is <code class=\"language-text\">babel-preset-react</code>, this will transform JSX files to JS files . If you want to learn more about Babel, click this <a href=\"http://babeljs.io/\" target=\"_blank\">link</a>.</p>\n<h3>Thinking in React</h3>\n<p>React uses one-way data flow by introducing <code class=\"language-text\">states</code> and <code class=\"language-text\">props</code>. You have to think differently when creating a react components. Here is the procedures I follow when creating a React component:</p>\n<ol>\n<li>Look at the JSON API to see what data can be used to display in the UI component</li>\n<li>Create a mock up of the React component</li>\n<li>Break down the UI into a component hierarchy</li>\n<li>Build a static version of React</li>\n<li>Add in states and properties</li>\n<li>Add in inverse data flow using event handling and callbacks</li>\n</ol>\n<h3>Understanding States and Properties</h3>\n<p>React thinks of UI as state machines. UI has various states and depending on thoses states it determines how the UI is rendered. The UI component will change only when a state is changed! The properties also known as <code class=\"language-text\">props</code> are the data that will be displayed. Think of <code class=\"language-text\">props</code> as a read-only variable or a constant, the only way to change the <code class=\"language-text\">props</code> is by changing the state. In React, an owner is the component that sets the <code class=\"language-text\">props</code> of the other components. The owner-ownee relationship is used in React where the owner components is the stateful component and the ownee is the stateless component. This means the owner component will control the <code class=\"language-text\">props</code> passed down to the ownee component. This is the one-way data binding where the stateful components passes down data as <code class=\"language-text\">props</code> to the ownee components and when the state in the owner components is changed the data changes and the <code class=\"language-text\">props</code> is updated in the ownee component. Understanding how to use <code class=\"language-text\">states</code> and <code class=\"language-text\">props</code> is essential when creating your own react component.</p>\n<h3>Conclusion</h3>\n<p>React is a powerful Javascript library that makes amazing UI components. Writing React components with JSX produce simple and easy to read code. There are many data fetching libraries that can be used with React like <a href=\"http://graphql.org/\" target=\"_blank\">GraphQL</a> and <a href=\"http://netflix.github.io/falcor/\">Falcor</a>. You can start learning React by doing their getting started tutorial <a href=\"https://facebook.github.io/react/docs/tutorial.html\">here</a>. Once you have a better understand of React, you can create your own React workflow using <a href=\"https://webpack.github.io/\">Webpack</a>.</p>\n<h3>Useful Reference Links</h3>\n<ul>\n<li><a href=\"https://facebook.github.io/react/docs/top-level-api.html\" target=\"_blank\">Top-Level API</a></li>\n<li><a href=\"https://facebook.github.io/react/docs/component-api.html\" target=\"_blank\">Component API</a></li>\n<li><a href=\"https://facebook.github.io/react/docs/component-specs.html\" target=\"_blank\">Component Specs and Lifecycle</a></li>\n<li><a href=\"https://facebook.github.io/react/docs/tags-and-attributes.html\" target=\"_blank\">Supported Tags and Attributes</a></li>\n<li><a href=\"https://facebook.github.io/react/docs/glossary.html\" target=\"_blank\">React (Virtual) DOM Terminology</a></li>\n</ul>","frontmatter":{"description":"My notes on React.","title":"My React Notes"}}},"pageContext":{"slug":"/2016/2016-02-25/"}}}